Title: 	A simple linux shell in c
Author: Chengjun Yuan 
Time: 	Sept.20.2015

1.	This shell comprises about 310 lines of codes, mainly divided into three sections(OR.subprograms):
	1.1. bool readLine(void);
	1.2. bool parseLine(int *numCommand);
	1.3. void singleCommand(void); &
		 void pipeCommand(int numCommand);
		 
2.1.The first sub-program is to save the input command line into String variable line. When the number of characters in the line exceeds 100, the sub-program will return false.

2.2.The second sub-program is to parse the line into one or several commands and save them into variable char ***argv. For instance, the 1th command will be stored in argv[0], and its first word is stored in argv[0][0]. If there is only one command in the line, then the variable numCommand = 1. There are many criterions to check the correctness of both the line and the commands in the line. All of them are realized in this sub-program. They are listed below:
	2.2.1.	The beginning stoken of one command must be a word, cannot be a operator, which means that "> foo" will be an invalid command.
	2.2.2.	There must be at least one space between the command token, operator token "<,>,|" and the argument token.
	2.2.3.	There can not be more than one input or output redirection operator existing in one command, and the input redirection operator '<', if exists, should be located in front of the output redirection operator '>'. Besides, the redirection operator cannot be followed by a command stoken but a file name token. So the codes below are used to detect this problem:
	
		if(afterRedirector==1){			
			strcpy(temp,"which "); 
			strcat(temp,pCommand_);
			if(system(temp)==0){
				printf("ERROR: the redirection operator is followed by a command \n"); 
				return false;
			}
		}
		afterRedirector=0;
	
	We first use the variable to indicate whether there is one redirection operator existing in front of current token or not. If yes, then the system command "system(which pCommand_)" is used to test whether pCommand_ is a system command word or not. If yes, then report error.
	2.2.4.	The pipe operator '|' can not be put at end of the line, which means that there must be one command located after a pipe operator. In addition, there should not be a command that includes a output redirection operator '>' located before '|'. 

3.1.If there is no pipe operator '|' in the input line, it means that there is only one command in this input line. Here we should consider the presence of the redirection operators '<', '>'. Set '<' for example, The codes are listed below:
		
		in=checkInputOutput(0,"<");	
		if(in>0){ 									
			input=open(argv[0][in],O_RDONLY,0600);	
			argv[0][in]=NULL;
			if(input<0){printf("ERROR: input file %s can not be opened \n",argv[0][in]); return;}
			dup2(input,STDIN_FILENO); 				
			close(input);			
		}
		
	Firstly, locate the position of '<', and remove it. Secondly, open the input file, and redirect STDIN to it. Lastly, close the file. The similar process is implemented for the output redirection operator '>'.

3.2.When the pipe operator '|' exists, it suggests that there are more than one commands in the line. '|' is used to divide the line into several commands and count the numCommand. Here we define two pipes, pipe1 & pipe2, respectively for the communication between the odd and even command. 
	For the first command, it will redirect STDOUT to pipe2[0], then execute command and close the pipe2[1]. Codes are listed below:
	
		if(i==0) dup2(pipe2[1],STDOUT_FILENO);
		...
		if(i==0)close(pipe2[1]); 
		
	For the last command, it will redirect STDIN to pipe1[0] or pipe2[0] depending on whether it is even or odd command. In a other word, the odd command should redirect the pipe2[0] of the previous nearby even command. Codes are listed below:
	
		else if(i==numCommand_-1){					
			if(i%2==0) dup2(pipe1[0],STDIN_FILENO);
			else dup2(pipe2[0],STDIN_FILENO);	
		}
		...
		else if(i==numCommand_-1){
			if(i%2==0) close(pipe1[0]);			
			else close(pipe2[0]);			
		}
	
	For the middle commands that are located between the first and last one, they have the same rules as the last one has. In addition, they should redirect their STDOUT to the pipe1[1] or pipe2[1] according to its odd or even. Then execute command and close the pipe ports they used. Codes are listed below:
	
		else{ 										
			if(i%2==0){ 							
				dup2(pipe1[0],STDIN_FILENO); 	
				dup2(pipe2[1],STDOUT_FILENO);	
			}else{      							
				dup2(pipe2[0],STDIN_FILENO); 	
				dup2(pipe1[1],STDOUT_FILENO);	
			}
		}
		...
		else{
			if(i%2==0){
				close(pipe1[0]);					
				close(pipe2[1]);				
			}else{
				close(pipe2[0]);				
				close(pipe1[1]);				
			}
		}
		
4.	How to use this shell.
	4.1.First type make to compile it. executable "ownShell" is created.
	4.2.Then type ./ownShell to start it.
	4.3.input command line after "osh>".
	4.4.There are output information "excited, status=0" after every successful executing of commands. If there are three commands in one line, then this information will appear three times.
	4.5.Type exit to exit the shell.