/*****************************************/
/* using multi thread to validate Sudoku */
/* Author: Chengjun Yuan @UVa            */
/* Time:   Sept.26.2015                  */
/*****************************************/

1.	Here total 11 threads are created to do the validation of input Sudoku matrix. One thread is to validate whether each row contains all of the digits from 1 to 9, and another thread is to validate the columns, and the other 9 threads are in charge of the 9 sub-grids(3x3). Three different validation sub-programs for these purposes are listed below:

			void *validateRow(void *para);
			void *validateCol(void *para);
			void *validateSubgrid(void *para);
			
	In addition, the global variable "validateFlag" indicates whether the Sudoku is valid or not. It is initiated with true. If it still is true after all validation threads, then a message "The sudoku puzzle is VALID" will be outputted, otherwise, the Sudoku will be reported as invalid one. The codes are listed below:
			if(validateFlag)					// determine whether the Sudoku is valid or not.
				printf("The sudoku puzzle is VALID \n");
			else 
				printf("The sudoku puzzle is INVALID \n");
	
	
2.	In sub-program "validateRow" or "validateCol", the array flag[] is used to mark the presence of digits 1-9. For example, if digit 1 appears, then flag[1] will equal 1. After traversal of each row or column, the array flag[] is examined. If one or more digits are missing from that row or column, a message about that missing will be reported and the global variable "validateFlag" will be assigned false. The row validation codes are listed below:
			
			for(i=0;i<9;i++){					// traverse all 9 rows.
				memset(flag,0,sizeof(flag)); 	// reset the values of flag[] to zero.
				for(j=0;j<9;j++){				// traverse one row
					flag[matrix[i][j]]=1; 		// mark the presence of digits by assigning 1.
				}
				for(j=1;j<=9;j++){				// examine the presence of digits 1-9.
					if(flag[j]==0){				// If digit j does not exist.
						printf("Digit %d is missing from Row %d \n",j,i+1);
						validateFlag=false;		// assign false to validateFlag if digit j is missing.
					}
				}
			}
			
	The colume validation codes are listed below:
	
			for(j=0;j<9;j++){					// traverse all 9 columns.
				memset(flag,0,sizeof(flag));	// reset the values of flag[] to zero.
				for(i=0;i<9;i++){				// traverse one column.
					flag[matrix[i][j]]=1;		// mark the presence of digits by assigning 1.
				}
				for(i=1;i<=9;i++){				// examine the presence of digits 1-9.
					if(flag[i]==0){				// If digit i does not exist.
						printf("Digit %d is missing from Column %d \n",i,j+1);
						validateFlag=false;		// assign false to validateFlag if digit i is missing.
					}
				}
			}
			
			
3.	In sub-program "validateSubgrid", the structure "parameters *para[]" is used to pass the information of the sub-grid by indicating the row and column in "parameters".	For instance, if para[2]->row = 0 & para[2]->column = 1, it means that the sub-grid with row 1-3 and column 4-5 is validated in the sub-program. The codes are listed below with the comments:

			parameters *para_=para;
			istart=3*(para_->row);				// get the first row # of the sub-grid.
			jstart=3*(para_->column);			// get the first column # of the sub-grid.
			memset(flag,0,sizeof(flag));		// reset the values of flag[] to zero.
			for(i=istart;i<istart+3;i++){		// traverse the sub-grid.
				for(j=jstart;j<jstart+3;j++){
					flag[matrix[i][j]]=1;		// mark the presence of digits by assigning 1.
				}
			}
			for(i=1;i<=9;i++){					// examine the presence of digits 1-9.
				if(flag[i]==0){					// If digit i does not exist.
					printf("Digit %d is missing from the 3x3 Subgrid of row (%d..%d) and column (%d..%d) \n",i,istart+1,istart+3,jstart+1,jstart+3);
					validateFlag=false;			// assign false to validateFlag if digit i is missing.
				}
			}


4.	How to schedule and manage the multiple threads. Three variables are defined below. The "lock" is used to protect the shared data from concurrent modifications, especially the global variable "validateFlag". 

			pthread_mutex_t lock;				// define a mutual exclusion lock for threads.
			pthread_t tid[numThreads];			// to store the id of each threads.
			pthread_attr_t attr;				// define the thread attribute.
			
	And then initiate these variables:
	
			pthread_mutex_init(&lock,NULL);		// initiate the mutual exclusion lock.
			pthread_attr_init(&attr);			// initiate the thread attribute.
	
	Create 11 threads one by one:
	
			for(i=0;i<numThreads;i++){
				para[i]=(parameters*)malloc(sizeof(parameters));
				if(i==0){						// create the thread for row validation.
					pthread_create(&tid[i],&attr,validateRow,para[i]);
				}else if(i==1){					// create the thread for column validation.
					pthread_create(&tid[i],&attr,validateCol,para[i]);
				}else{							// create the threads for each sub-grid validation.
					para[i]->row=(i-2)/3; para[i]->column=(i-2)%3;
					pthread_create(&tid[i],&attr,validateSubgrid,para[i]);
				}
			}
			for(i=0;i<numThreads;i++)			// join each thread.
				 pthread_join(tid[i],NULL);
			pthread_mutex_destroy(&lock);		// destroy the mutual exclusion lock.

			
5.	How to run this program.
	5.1.First, use command "make" to compile the cource code. An executable "p3cyuan" will be obtained.
	5.2.Use command "./p3cyuan" to execute the validation program. It will read data from the default file "sudoku.txt".
	5.3.If you want the program to validate the Sudoku from the specified file, you can use command "./p3cyuan specifiedFileName".